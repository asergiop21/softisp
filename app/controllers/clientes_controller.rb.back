class ClientesController < ApplicationController
  # GET /clientes
  # GET /clientes.json
  def index
    @clientes = Cliente.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @clientes }
    end
  end

  # GET /clientes/1
  # GET /clientes/1.json
  def show
    @cliente = Cliente.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @cliente }
    end
  end

  # GET /clientes/new
  # GET /clientes/new.json
  def new
    @cliente = Cliente.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @cliente }
    end
  end

  # GET /clientes/1/edit
  def edit
    @cliente = Cliente.find(params[:id])
  end

  # POST /clientes
  # POST /clientes.json
  def create

 @cliente = Cliente.new(params[:cliente])
     cl_apellido = @cliente.cl_apellido
     ip =  @cliente.cl_ip

     cut_ip = ip.split(".")
     ip_mkt = "#{cut_ip[0]}.#{cut_ip[1]}.#{cut_ip[2]}"

     @mkt1= Mktcx.where("Mktcxes.mkcip ilike ?","#{ip_mkt}%")

     @mkt1.each do |r|
        @ipc = r.mkcip
        @usc= r.mkcusuario
        @passc = r.mkcpass
    end
               #abort(@ipc)
               #  #abort(ip_mkt) 
                require 'rubygems'
                require 'mtik'
               #    # Be verbose in output
                   MTik::verbose = true
               #
               #    #debugger
               #    # Connect to the device:
                    @connection = MTik::command(
                    :host    => '10.255.0.152',
                    :user    => 'programador',
                    :pass    => 'cualquiera',
                    :command =>  [
                    #agrega una  toda las queue    
                    "/queue/simple/add",
                    "=name=#{cl_apellido}",
                    "=target-addresses=#{ip}"
                    #"name= Prueba_ruby",
                    #imprime solo los campos que deseo
                    #    "=.proplist=.id,name,target-addresses"
                    ]
                    #  :limit => 10  ## Auto-cancel after 10 replies
                    )

    respond_to do |format|
      if @cliente.save
        format.html { redirect_to @cliente, notice: 'Cliente was successfully created.' }
        format.json { render json: @cliente, status: :created, location: @cliente }
      else
        format.html { render action: "new" }
        format.json { render json: @cliente.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /clientes/1
  # PUT /clientes/1.json
  def update
    @cliente = Cliente.find(params[:id])

    respond_to do |format|
      if @cliente.update_attributes(params[:cliente])
        format.html { redirect_to @cliente, notice: 'Cliente was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @cliente.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /clientes/1
  # DELETE /clientes/1.json
  def destroy
    @cliente = Cliente.find(params[:id])
    @cliente.destroy

    respond_to do |format|
      format.html { redirect_to clientes_url }
      format.json { head :no_content }
    end
  end
end
